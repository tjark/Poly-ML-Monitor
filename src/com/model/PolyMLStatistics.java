package com.model;

public class PolyMLStatistics {

    // FIXME: Do these types cover the range of possible values
    // generated by Poly/ML?
    private long sizeHeap;
    private long gcFullGCs;
    private double timeGCUser;
    private long threadsInML;
    private long gcPartialGCs;
    private long threadsTotal;
    private double timeGCSystem;
    private long[] userCounters;
    private long threadsWaitIO;
    private double timeNonGCUser;
    private long sizeAllocation;
    private double timeNonGCSystem;
    private long threadsWaitMutex;
    private long threadsWaitSignal;
    private long sizeAllocationFree;
    private long sizeHeapFreeLastGC;
    private long threadsWaitCondVar;
    private long sizeHeapFreeLastFullGC;

    public long getSizeHeap()
    {
        return sizeHeap;
    }

    public void setSizeHeap(long sizeHeap)
    {
        this.sizeHeap = sizeHeap;
    }

    public long getGcFullGCs()
    {
        return gcFullGCs;
    }

    public void setGcFullGCs(long gcFullGCs)
    {
        this.gcFullGCs = gcFullGCs;
    }

    public double getTimeGCUser()
    {
        return timeGCUser;
    }

    public void setTimeGCUser(double timeGCUser)
    {
        this.timeGCUser = timeGCUser;
    }

    public long getThreadsInML()
    {
        return threadsInML;
    }

    public void setThreadsInML(long threadsInML)
    {
        this.threadsInML = threadsInML;
    }

    public long getGcPartialGCs()
    {
        return gcPartialGCs;
    }

    public void setGcPartialGCs(long gcPartialGCs)
    {
        this.gcPartialGCs = gcPartialGCs;
    }

    public long getThreadsTotal()
    {
        return threadsTotal;
    }

    public void setThreadsTotal(long threadsTotal)
    {
        this.threadsTotal = threadsTotal;
    }

    public double getTimeGCSystem()
    {
        return timeGCSystem;
    }

    public void setTimeGCSystem(double timeGCSystem)
    {
        this.timeGCSystem = timeGCSystem;
    }

    public long[] getUserCounters()
    {
        return userCounters;
    }

    public void setUserCounters(long[] userCounters)
    {
        this.userCounters = userCounters;
    }

    public long getThreadsWaitIO()
    {
        return threadsWaitIO;
    }

    public void setThreadsWaitIO(long threadsWaitIO)
    {
        this.threadsWaitIO = threadsWaitIO;
    }

    public double getTimeNonGCUser()
    {
        return timeNonGCUser;
    }

    public void setTimeNonGCUser(double timeNonGCUser)
    {
        this.timeNonGCUser = timeNonGCUser;
    }

    public long getSizeAllocation()
    {
        return sizeAllocation;
    }

    public void setSizeAllocation(long sizeAllocation)
    {
        this.sizeAllocation = sizeAllocation;
    }

    public double getTimeNonGCSystem()
    {
        return timeNonGCSystem;
    }

    public void setTimeNonGCSystem(double timeNonGCSystem)
    {
        this.timeNonGCSystem = timeNonGCSystem;
    }

    public long getThreadsWaitMutex()
    {
        return threadsWaitMutex;
    }

    public void setThreadsWaitMutex(long threadsWaitMutex)
    {
        this.threadsWaitMutex = threadsWaitMutex;
    }

    public long getThreadsWaitSignal()
    {
        return threadsWaitSignal;
    }

    public void setThreadsWaitSignal(long threadsWaitSignal)
    {
        this.threadsWaitSignal = threadsWaitSignal;
    }

    public long getSizeAllocationFree()
    {
        return sizeAllocationFree;
    }

    public void setSizeAllocationFree(long sizeAllocationFree)
    {
        this.sizeAllocationFree = sizeAllocationFree;
    }

    public long getSizeHeapFreeLastGC()
    {
        return sizeHeapFreeLastGC;
    }

    public void setSizeHeapFreeLastGC(long sizeHeapFreeLastGC)
    {
        this.sizeHeapFreeLastGC = sizeHeapFreeLastGC;
    }

    public long getThreadsWaitCondVar()
    {
        return threadsWaitCondVar;
    }

    public void setThreadsWaitCondVar(long threadsWaitCondVar)
    {
        this.threadsWaitCondVar = threadsWaitCondVar;
    }

    public long getSizeHeapFreeLastFullGC()
    {
        return sizeHeapFreeLastFullGC;
    }

    public void setSizeHeapFreeLastFullGC(long sizeHeapFreeLastFullGC)
    {
        this.sizeHeapFreeLastFullGC = sizeHeapFreeLastFullGC;
    }

}
